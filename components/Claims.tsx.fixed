import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Loader2, AlertCircle, Upload, FileText, CheckCircle2, Search, Download, Eye, Pencil, Plus } from "lucide-react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { collection, query, where, getDocs, addDoc, serverTimestamp, doc, getDoc, updateDoc, setDoc, writeBatch, onSnapshot } from "firebase/firestore"
import { ref, uploadBytes, getDownloadURL } from "firebase/storage"
import { db, storage } from "@/src/FirebaseConfg"
import { toast } from "@/components/ui/use-toast"
import { format } from "date-fns"
import { ContractSummary } from "@/components/contract/ContractSummary"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { saveClaimData, generateClaimNumber } from "@/src/claimFunctions"

type PolicyDetails = {
  policyNumber: string
  holderName: string
  status: string
  coverageAmount: number
  startDate: Date
  type: string
}

type ClaimDocument = {
  type: string
  file: File
  status: "uploading" | "completed" | "error"
  url?: string
}

type ClaimFormData = {
  policyNumber: string
  claimantName: string
  claimantContact: string
  relationship: string
  serviceDate: string
  serviceProvider: string
  location: string
  documents: ClaimDocument[]
  accountHolder?: string
  bankName?: string
  accountType?: string
  accountNumber?: string
  branchCode?: string
}

type ClaimTrackingData = {
  claimNumber: string
  submissionDate: Date
  status: string
  policyNumber: string
  claimantName: string
  documents: Array<{
    type: string
    url: string
  }>
}

type ContractData = {
  mainMember: {
    personalInfo: {
      title: string
      firstName: string
      lastName: string
      initials: string
      dateOfBirth: Date | null
      gender: string
      language: string
      maritalStatus: string
      nationality: string
      idType: "South African ID" | "Passport"
      idNumber: string
      idDocumentUrl: string | null
    }
    contactDetails: Array<{
      type: "Email" | "Phone Number"
      value: string
    }>
    addressDetails: {
      streetAddress: string
      city: string
      stateProvince: string
      postalCode: string
      country: string
    }
    contractNumber?: string
    contractId?: string
  }
  beneficiaries: Array<{
    personalInfo: {
      title: string
      firstName: string
      lastName: string
      initials: string
      dateOfBirth: Date | null
      gender: string
      relationshipToMainMember: string
      nationality: string
      idType: "South African ID" | "Passport"
      idNumber: string
      beneficiaryPercentage: number
      idDocumentUrl: string | null
    }
    contactDetails: Array<{
      type: "Email" | "Phone Number"
      value: string
    }>
    addressDetails: {
      streetAddress: string
      city: string
      stateProvince: string
      postalCode: string
      country: string
    }
  }>
  dependents: Array<{
    personalInfo: {
      firstName: string
      lastName: string
      initials: string
      dateOfBirth: Date | null
      gender: string
      relationshipToMainMember: string
      nationality: string
      idType: "South African ID" | "Passport"
      idNumber: string
      dependentStatus: "Active" | "Inactive"
      medicalAidNumber?: string
      employer?: string
      school?: string
      idDocumentUrl: string | null
    }
    contactDetails: Array<{
      type: "Email" | "Phone Number"
      value: string
    }>
    addressDetails: {
      streetAddress: string
      city: string
      stateProvince: string
      postalCode: string
      country: string
    }
  }>
  policiesDetails: {
    policiesId: string
    name: string
    coverAmount: string
    premium: number | null
  }
  cateringOptions: Array<{
    id: string
    name: string
    price: number
  }>
  status?: string
}

// Add new type for deceased information
type DeceasedInfo = {
  firstName: string
  lastName: string
  idNumber: string
  dateOfDeath: string
  causeOfDeath: string
  placeOfDeath: string
  relationship: string
}

// Add new type for bank details
type BankDetail = {
  id: string
  accountHolder: string
  bankName: string
  accountType: string
  accountNumber: string
  branchCode: string
  statementUrl?: string
  memberId?: string
}

interface ClaimsProps {
  userRole?: string
}

export function Claims({ userRole }: ClaimsProps) {
  const canEdit = userRole && userRole !== 'View Only'

  const [activeTab, setActiveTab] = useState("policy-lookup")
  const [loading, setLoading] = useState(false)
  const [policyNumber, setPolicyNumber] = useState("")
  const [policyDetails, setPolicyDetails] = useState<PolicyDetails | null>(null)
  const [documents, setDocuments] = useState<ClaimDocument[]>([])
  const [formData, setFormData] = useState<ClaimFormData>({
    policyNumber: "",
    claimantName: "",
    claimantContact: "",
    relationship: "",
    serviceDate: "",
    serviceProvider: "",
    location: "",
    documents: [],
    accountHolder: "",
    bankName: "",
    accountType: "",
    accountNumber: "",
    branchCode: ""
  })
  const [trackingNumber, setTrackingNumber] = useState("")
  const [trackedClaims, setTrackedClaims] = useState<ClaimTrackingData[]>([])
  const [loadingTracking, setLoadingTracking] = useState(false)
  const [contractData, setContractData] = useState<ContractData | null>(null)
  const [successDialogOpen, setSuccessDialogOpen] = useState(false)
  const [submittedClaimDetails, setSubmittedClaimDetails] = useState<{
    claimNumber: string;
    claimantName: string;
    serviceDate: string;
    serviceProvider: string;
    status: string;
  } | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [submitting, setSubmitting] = useState(false)
  const [deceasedInfo, setDeceasedInfo] = useState<DeceasedInfo>({
    firstName: "",
    lastName: "",
    idNumber: "",
    dateOfDeath: "",
    causeOfDeath: "",
    placeOfDeath: "",
    relationship: ""
  })
  const [claimNumber, setClaimNumber] = useState<string>("")
  const [viewingDocument, setViewingDocument] = useState<{ url: string; type: string } | null>(null)
  const [isImageLoading, setIsImageLoading] = useState(false)
  const [claimStatus, setClaimStatus] = useState<string>("FNOL")
  const [claimDetails, setClaimDetails] = useState<{
    claimNumber: string;
    status: string;
  } | null>(null)
  const [causeOfDeathOptions, setCauseOfDeathOptions] = useState<Array<{ id: string; option: string }>>([])
  const [memberOptions, setMemberOptions] = useState<Array<{
    id: string,
    firstName: string,
    lastName: string,
    idNumber: string,
    role: string
  }>>([])
  
  // Add state to track the selected deceased person's ID
  const [selectedDeceasedPerson, setSelectedDeceasedPerson] = useState<string>("")

  // Add state for validation messages
  const [validationMessage, setValidationMessage] = useState<{
    type: "error" | "warning" | null,
    message: string
  }>({ type: null, message: "" })

  // Add state for bank details edit dialog
  const [bankDetailsDialogOpen, setBankDetailsDialogOpen] = useState(false)
  
  // Add state for multiple bank details
  const [bankDetails, setBankDetails] = useState<BankDetail[]>([])
  
  // Add state for currently editing bank detail
  const [currentBankDetail, setCurrentBankDetail] = useState<BankDetail | null>(null)
  
  // Add state for beneficiaries
  const [beneficiaries, setBeneficiaries] = useState<Array<{
    id: string,
    firstName: string,
    lastName: string,
    idNumber: string,
    role: string
  }>>([])

  useEffect(() => {
    // Set up listener for cause of death options
    const unsubscribe = onSnapshot(collection(db, 'CauseOfDeath'), {
      next: (snapshot) => {
      try {
        const options = snapshot.docs.map(doc => ({
          id: doc.id,
          option: doc.data().option
        }))
        setCauseOfDeathOptions(options)
      } catch (error) {
        console.error('Error in cause of death listener:', error)
      }
      },
      error: (error) => {
      console.error('Error setting up cause of death listener:', error)
      }
    })

    // Cleanup listener on component unmount
    return () => unsubscribe()
  }, [])

  // Add effect to save bank details to localStorage when they change
  useEffect(() => {
    if (policyNumber && bankDetails.length > 0) {
      localStorage.setItem(`bankDetails-${policyNumber}`, JSON.stringify(bankDetails))
    }
  }, [bankDetails, policyNumber])

  const handlePolicyLookup = async () => {
    if (!policyNumber.trim()) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Please enter a policy number"
      })
      return
    }

    try {
      setLoading(true)
      
      // First check if contract exists
      const contractsRef = collection(db, 'Contracts')
      const contractQuery = query(contractsRef, where("contractNumber", "==", policyNumber))
      const contractSnapshot = await getDocs(contractQuery)

      if (contractSnapshot.empty) {
        toast({
          variant: "destructive",
          title: "Not Found",
          description: "No contract found with the provided number"
        })
        setPolicyDetails(null)
        setContractData(null)
        setMemberOptions([]) // Clear member options
        setSelectedDeceasedPerson("") // Reset selected deceased person
        setBankDetails([]) // Clear bank details
        return
      }

      const contractDoc = contractSnapshot.docs[0]
      const contractData = contractDoc.data()

      // Get main member details
      const membersQuery = query(
        collection(db, 'Members'),
        where('idNumber', '==', contractData.memberIdNumber)
      )
      const memberSnapshot = await getDocs(membersQuery)
      const memberData = memberSnapshot.docs[0]?.data()

      // Get plan details
      const planRef = doc(db, 'Policies', contractData.policiesId)
      const policiesDoc = await getDoc(planRef)
      const policiesData = policiesDoc.data()

      // Get beneficiaries
      const beneficiariesQuery = query(
        collection(db, 'Beneficiaries'),
        where('contractNumber', '==', contractData.contractNumber)
      )
      const beneficiariesSnapshot = await getDocs(beneficiariesQuery)
      const beneficiariesData = beneficiariesSnapshot.docs.map(doc => doc.data())

      // Get dependents
      const dependentsQuery = query(
        collection(db, 'Dependents'),
        where('contractNumber', '==', contractData.contractNumber)
      )
      const dependentsSnapshot = await getDocs(dependentsQuery)
      const dependentsData = dependentsSnapshot.docs.map(doc => doc.data())

      // Get catering options
      const cateringOptionsData = await Promise.all(
        (contractData.cateringOptionIds || []).map(async (id: string) => {
          const cateringRef = doc(db, 'catering', id)
          const cateringDoc = await getDoc(cateringRef)
          return {
            id,
            ...cateringDoc.data()
          }
        })
      )

      // Construct full contract data
      const fullContractData: ContractData = {
        mainMember: {
          personalInfo: {
            title: memberData?.title || "",
            firstName: memberData?.firstName || "",
            lastName: memberData?.lastName || "",
            initials: memberData?.initials || "",
            dateOfBirth: memberData?.dateOfBirth?.toDate() || null,
            gender: memberData?.gender || "",
            language: memberData?.language || "",
            maritalStatus: memberData?.maritalStatus || "",
            nationality: memberData?.nationality || "",
            idType: memberData?.idType || "South African ID",
            idNumber: memberData?.idNumber || "",
            idDocumentUrl: memberData?.idDocumentUrl || null,
          },
          contactDetails: memberData?.contactDetails || [],
          addressDetails: {
            streetAddress: memberData?.addressDetails?.streetAddress || "",
            city: memberData?.addressDetails?.city || "",
            stateProvince: memberData?.addressDetails?.stateProvince || "",
            postalCode: memberData?.addressDetails?.postalCode || "",
            country: memberData?.addressDetails?.country || "",
          },
          contractNumber: contractData.contractNumber,
          contractId: contractDoc.id
        },
        beneficiaries: beneficiariesData.map(ben => ({
          personalInfo: {
            title: ben.title || "",
            firstName: ben.firstName || "",
            lastName: ben.lastName || "",
            initials: ben.initials || "",
            dateOfBirth: ben.dateOfBirth?.toDate() || null,
            gender: ben.gender || "",
            relationshipToMainMember: ben.relationshipToMainMember || "",
            nationality: ben.nationality || "",
            idType: ben.idType || "South African ID",
            idNumber: ben.idNumber || "",
            beneficiaryPercentage: ben.beneficiaryPercentage || 0,
            idDocumentUrl: ben.idDocumentUrl || null,
          },
          contactDetails: ben.contactDetails || [],
          addressDetails: {
            streetAddress: ben.addressDetails?.streetAddress || "",
            city: ben.addressDetails?.city || "",
            stateProvince: ben.addressDetails?.stateProvince || "",
            postalCode: ben.addressDetails?.postalCode || "",
            country: ben.addressDetails?.country || "",
          }
        })),
        dependents: dependentsData.map(dep => ({
          personalInfo: {
            firstName: dep.firstName || "",
            lastName: dep.lastName || "",
            initials: dep.initials || "",
            dateOfBirth: dep.dateOfBirth?.toDate() || null,
            gender: dep.gender || "",
            relationshipToMainMember: dep.relationshipToMainMember || "",
            nationality: dep.nationality || "",
            idType: dep.idType || "South African ID",
            idNumber: dep.idNumber || "",
            dependentStatus: dep.dependentStatus || "Active",
            medicalAidNumber: dep.medicalAidNumber,
            employer: dep.employer,
            school: dep.school,
            idDocumentUrl: dep.idDocumentUrl || null,
          },
          contactDetails: dep.contactDetails || [],
          addressDetails: {
            streetAddress: dep.addressDetails?.streetAddress || "",
            city: dep.addressDetails?.city || "",
            stateProvince: dep.addressDetails?.stateProvince || "",
            postalCode: dep.addressDetails?.postalCode || "",
            country: dep.addressDetails?.country || "",
          }
        })),
        policiesDetails: {
          policiesId: contractData.policiesId,
          name: policiesData?.name || 'Unknown Plan',
          coverAmount: policiesData?.coverAmount?.toString() || '0',
          premium: policiesData?.premium || null
        },
        cateringOptions: cateringOptionsData,
        status: contractData.status
      }

      setContractData(fullContractData)
      setPolicyDetails({
        policyNumber: contractData.contractNumber,
        holderName: `${memberData?.firstName} ${memberData?.lastName}`,
        status: contractData.status,
        coverageAmount: policiesData?.coverAmount || 0,
        startDate: contractData.startDate?.toDate() || new Date(),
        type: policiesData?.name || 'Unknown'
      })

      // Auto-fill policy number in claim form
      setFormData(prev => ({ ...prev, policyNumber }))
      
      // Get member relationships for this contract
      const relationshipsRef = collection(db, 'member_contract_relationships')
      const relationshipsQuery = query(
        relationshipsRef,
        where('contract_number', '==', policyNumber),
        where('role', 'in', ['Main Member', 'Dependent'])
      )
      const relationshipsSnapshot = await getDocs(relationshipsQuery)
      
      // Get member details for each relationship
      const memberOptionsData = await Promise.all(
        relationshipsSnapshot.docs.map(async (relationshipDoc) => {
          const relationshipData = relationshipDoc.data()
          const memberId = relationshipData.member_id
          const memberRole = relationshipData.role
          
          // Get member details from Members collection
          const memberDoc = await getDoc(doc(db, 'Members', memberId))
          if (!memberDoc.exists()) return null
          
          const memberData = memberDoc.data()
          return {
            id: memberId,
            firstName: memberData.firstName || '',
            lastName: memberData.lastName || '',
            idNumber: memberData.idNumber || '',
            role: memberRole
          }
        })
      )
      
      // Filter out null values and set member options
      setMemberOptions(memberOptionsData.filter(Boolean))
      
      // Reset deceased info for the new contract
      setDeceasedInfo({
        firstName: "",
        lastName: "",
        idNumber: "",
        dateOfDeath: "",
        causeOfDeath: "",
        placeOfDeath: "",
        relationship: ""
      })
      setSelectedDeceasedPerson("")

      // Get beneficiaries for this contract
      const beneficiaryRelationshipsQuery = query(
        relationshipsRef,
        where('contract_number', '==', policyNumber),
        where('role', '==', 'Beneficiary')
      )
      const beneficiaryRelationshipsSnapshot = await getDocs(beneficiaryRelationshipsQuery)
      
      // Get beneficiary details
      const beneficiaryMembersData = await Promise.all(
        beneficiaryRelationshipsSnapshot.docs.map(async (relationshipDoc) => {
          const relationshipData = relationshipDoc.data()
          const memberId = relationshipData.member_id
          
          // Get member details from Members collection
          const memberDoc = await getDoc(doc(db, 'Members', memberId))
          if (!memberDoc.exists()) return null
          
          const memberData = memberDoc.data()
          return {
            id: memberId,
            firstName: memberData.firstName || '',
            lastName: memberData.lastName || '',
            idNumber: memberData.idNumber || '',
            role: 'Beneficiary'
          }
        })
      )
      
      // Filter out null values and set beneficiaries
      const validBeneficiaries = beneficiaryMembersData.filter(Boolean)
      setBeneficiaries(validBeneficiaries)
      
      // Check if we have saved bank details in localStorage
      const savedBankDetails = localStorage.getItem(`bankDetails-${policyNumber}`)
      if (savedBankDetails) {
        try {
          const parsedBankDetails = JSON.parse(savedBankDetails)
          setBankDetails(parsedBankDetails)
        } catch (error) {
          console.error('Error parsing saved bank details:', error)
          // Initialize bank details as before if there's an error
          initializeBankDetails(memberData, validBeneficiaries, memberSnapshot)
        }
      } else {
        // Initialize bank details with main member and beneficiaries
        initializeBankDetails(memberData, validBeneficiaries, memberSnapshot)
      }
      
    } catch (error) {
      console.error('Error looking up policy:', error)
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to lookup policy. Please try again."
      })
    } finally {
      setLoading(false)
    }
  }

  // Helper function to initialize bank details
  const initializeBankDetails = (memberData: any, validBeneficiaries: any[], memberSnapshot: any) => {
    const initialBankDetails: BankDetail[] = []
    
    // Add main member
    if (memberData) {
      initialBankDetails.push({
        id: `bank-${Date.now()}-main`,
        accountHolder: `${memberData.firstName} ${memberData.lastName}`,
        bankName: "",
        accountType: "",
        accountNumber: "",
        branchCode: "",
        memberId: memberSnapshot.docs[0]?.id
      })
    }
    
    // Add beneficiaries
    validBeneficiaries.forEach((beneficiary, index) => {
      if (beneficiary) {
        initialBankDetails.push({
          id: `bank-${Date.now()}-${index}`,
          accountHolder: `${beneficiary.firstName} ${beneficiary.lastName}`,
          bankName: "",
          accountType: "",
          accountNumber: "",
          branchCode: "",
          memberId: beneficiary.id
        })
      }
    })
    
    setBankDetails(initialBankDetails)
  }

  const handleFileUpload = async (file: File, documentType: string, bankDetailId?: string) => {
    try {
      // Add document to state with uploading status
      const newDocument: ClaimDocument = {
        type: documentType,
        file,
        status: "uploading"
      }
      setDocuments(prev => [...prev, newDocument])

      // Upload to Firebase Storage
      const timestamp = Date.now()
      const fileName = `claims/${policyNumber}/${documentType}_${timestamp}_${file.name.replace(/[^a-zA-Z0-9.]/g, '_')}`
      const fileRef = ref(storage, fileName)
      
      await uploadBytes(fileRef, file)
      const downloadUrl = await getDownloadURL(fileRef)

      // Update document status and URL
      setDocuments(prev => prev.map(doc => 
        doc.file === file 
          ? { ...doc, status: "completed", url: downloadUrl }
          : doc
      ))

      // If this is a bank statement for a specific bank detail, update that bank detail
      if (documentType === "Bank Statement" && bankDetailId) {
        setBankDetails(prev => prev.map(detail => 
          detail.id === bankDetailId
            ? { ...detail, statementUrl: downloadUrl }
            : detail
        ))
      }

      toast({
        title: "Success",
        description: "Document uploaded successfully"
      })
    } catch (error) {
      console.error('Error uploading document:', error)
      setDocuments(prev => prev.map(doc => 
        doc.file === file 
          ? { ...doc, status: "error" }
          : doc
      ))
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to upload document. Please try again."
      })
    }
  }

  const handleSubmitClaim = async () => {
    try {
      setSubmitting(true)
      setError(null)

      // Validate required fields
      if (!policyNumber || !formData.serviceDate || !formData.serviceProvider || !formData.location) {
        setError("Please fill in all required fields")
        return
      }

      // Validate required documents
      const requiredDocs = ['Death Certificate', 'ID Document']
      const hasAllRequiredDocs = requiredDocs.every(docType =>
        documents.some(doc => doc.type === docType && doc.status === "completed")
      )
      if (!hasAllRequiredDocs) {
        setError("Please upload all required documents")
        return
      }

      // Validate at least one bank detail is complete
      const hasCompleteBankDetail = bankDetails.some(detail => 
        detail.bankName && detail.accountType && detail.accountNumber && detail.branchCode && detail.statementUrl
      )
      if (!hasCompleteBankDetail) {
        setError("Please complete at least one bank detail with statement")
        return
      }

      // Generate claim number
      const claimNumber = await generateClaimNumber()

      // Save claim data
      const result = await saveClaimData({
        claimNumber,
        contractNumber: contractData?.mainMember.contractNumber || "",
        policyDetails: {
          policyNumber,
          holderName: contractData?.mainMember.personalInfo.firstName + " " + contractData?.mainMember.personalInfo.lastName,
          coverageAmount: parseFloat(contractData?.policiesDetails.coverAmount || "0")
        },
        deceasedInfo,
        bankDetails: bankDetails.map(detail => ({
          accountHolder: detail.accountHolder || "",
          bankName: detail.bankName || "",
          accountType: detail.accountType || "",
          accountNumber: detail.accountNumber || "",
          branchCode: detail.branchCode || "",
          statementUrl: detail.statementUrl || ""
        })),
        documents: documents
          .filter(doc => doc.status === "completed" && doc.url)
          .map(doc => ({
            type: doc.type,
            url: doc.url || ""
          })),
        claimDetails: {
          claimantName: formData.claimantName,
          relationship: formData.relationship,
          serviceDate: formData.serviceDate,
          serviceProvider: formData.serviceProvider,
          location: formData.location,
          status: "FNOL"
        }
      })

      if (result.success) {
        // Show success dialog
        setSubmittedClaimDetails({
          claimNumber,
          status: "FNOL",
          claimantName: formData.claimantName,
          serviceDate: formData.serviceDate,
          serviceProvider: formData.serviceProvider
        })
        setSuccessDialogOpen(true)

        // Reset form
        setFormData({
          policyNumber: "",
          claimantName: "",
          claimantContact: "",
          relationship: "",
          serviceDate: "",
          serviceProvider: "",
          location: "",
          documents: [],
          accountHolder: "",
          bankName: "",
          accountType: "",
          accountNumber: "",
          branchCode: ""
        })
        setDocuments([])
        setBankDetails([])
        setDeceasedInfo({
          firstName: "",
          lastName: "",
          idNumber: "",
          dateOfDeath: "",
          causeOfDeath: "",
          placeOfDeath: "",
          relationship: ""
        })
        setSelectedDeceasedPerson("") // Reset selected deceased person

        // Move to tracking tab
        setActiveTab("tracking")
      } else {
        throw new Error("Failed to save claim data")
      }
    } catch (error) {
      console.error('Error submitting claim:', error)
      setError("Failed to submit claim. Please try again.")
    } finally {
      setSubmitting(false)
    }
  }

  const handleTrackClaim = async () => {
    if (!trackingNumber.trim()) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Please enter a claim number"
      })
      return
    }

    try {
      setLoadingTracking(true)
      const claimsRef = collection(db, 'Claims')
      const q = query(
        claimsRef,
        where("claimNumber", "==", trackingNumber)
      )
      const querySnapshot = await getDocs(q)

      if (querySnapshot.empty) {
        toast({
          variant: "destructive",
          title: "Not Found",
          description: "No claim found with the provided number"
        })
        return
      }

      const claims = querySnapshot.docs.map(doc => {
        const data = doc.data()
        return {
          claimNumber: data.claimNumber,
          submissionDate: data.submissionDate?.toDate() || new Date(),
          status: data.status,
          policyNumber: data.policyNumber,
          claimantName: data.claimantName,
          documents: data.documents || []
        }
      })

      setTrackedClaims(claims)
    } catch (error) {
      console.error('Error tracking claim:', error)
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to track claim. Please try again."
      })
    } finally {
      setLoadingTracking(false)
    }
  }

  const getStatusBadgeVariant = (status: string) => {
    switch (status.toLowerCase()) {
      case 'pending':
        return 'secondary'
      case 'approved':
        return 'default'
      case 'rejected':
        return 'destructive'
      default:
        return 'secondary'
    }
  }

  const handleTabChange = (value: string) => {
    // Always allow access to tracking and policy lookup tabs
    if (value === "tracking" || value === "policy-lookup") {
      setActiveTab(value)
      return
    }

    // Check if contract is selected
    if (!contractData) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Please lookup and select a contract first"
      })
      return
    }

    // Existing validation logic for other tabs
    if (value === "documents" || value === "claim-form" || value === "bank-details" || value === "claim-summary") {
      if (!policyDetails) {
        toast({
          variant: "destructive",
          title: "Error",
          description: "Please complete policy lookup first"
        })
        return
      }
    }

    if ((value === "documents" || value === "bank-details" || value === "claim-summary") && !deceasedInfo.firstName) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Please complete deceased information first"
      })
      return
    }

    // Update validation to check bankDetails array instead of formData
    if ((value === "documents" || value === "claim-summary") && 
        !bankDetails.some(detail => 
          detail.bankName && 
          detail.accountType && 
          detail.accountNumber && 
          detail.branchCode && 
          detail.statementUrl
        )) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Please complete at least one bank detail with statement first"
      })
      return
    }

    if (value === "claim-summary" && (!formData.serviceDate || !formData.serviceProvider || !formData.location)) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Please complete all claim form details before viewing summary"
      })
      return
    }

    setActiveTab(value)
  }

  const handleStatusChange = async (newStatus: string) => {
    try {
      if (!claimNumber) return;

      const claimsRef = collection(db, 'Claims')
      const q = query(claimsRef, where("claimNumber", "==", claimNumber))
      const querySnapshot = await getDocs(q)
      
      if (!querySnapshot.empty) {
        const docRef = querySnapshot.docs[0].ref
        await updateDoc(docRef, { status: newStatus })
        setClaimStatus(newStatus)
        
        toast({
          title: "Success",
          description: "Claim status updated successfully"
        })
      }
    } catch (error) {
      console.error('Error updating claim status:', error)
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update claim status"
      })
    }
  }

  // Add the validation function
  const validateCauseOfDeath = async (causeOfDeath: string) => {
    try {
      if (!contractData) return;
      
      // 1. Get waiting period for the selected cause of death
      const causeOfDeathRef = collection(db, 'CauseOfDeath');
      const causeQuery = query(causeOfDeathRef, where('option', '==', causeOfDeath));
      const causeSnapshot = await getDocs(causeQuery);
      
      if (causeSnapshot.empty) {
        console.error('Cause of death not found in database');
        return;
      }
      
      const waitingPeriod = causeSnapshot.docs[0].data().waitingPeriod || 0;
      
      // 2. Calculate contract duration (months between contract creation and today)
      const contractCreatedAt = contractData.createdAt?.toDate() || new Date();
      const today = new Date();
      
      // Calculate months between dates
      const monthsDiff = (today.getFullYear() - contractCreatedAt.getFullYear()) * 12 + 
                         (today.getMonth() - contractCreatedAt.getMonth());
      
      // 3. Check if contract duration is less than waiting period
      if (monthsDiff < waitingPeriod) {
        setValidationMessage({
          type: "error",
          message: `This claim cannot be processed. The contract has been active for ${monthsDiff} months, but the waiting period for ${causeOfDeath} is ${waitingPeriod} months.`
        });
        return;
      }
      
      // 4. Check payment consistency
      const paymentsRef = collection(db, 'Payments');
      const paymentsQuery = query(
        paymentsRef, 
        where('contractNumber', '==', contractData.mainMember.contractNumber)
      );
      const paymentsSnapshot = await getDocs(paymentsQuery);
      
      if (paymentsSnapshot.empty) {
        setValidationMessage({
          type: "error",
          message: "No payment records found for this contract."
        });
        return;
      }
      
      // Get all payments and sort by date
      const payments = paymentsSnapshot.docs.map(doc => ({
        paymentDate: doc.data().paymentDate?.toDate() || new Date(),
        amount: doc.data().amount || 0,
        status: doc.data().status || ""
      }))
      .filter(payment => payment.status === "Completed")
      .sort((a, b) => a.paymentDate.getTime() - b.paymentDate.getTime());
      
      // Determine required payment consistency period
      const requiredMonths = monthsDiff >= 12 ? 12 : waitingPeriod;
      
      // Check if we have enough payments
      if (payments.length < requiredMonths) {
        setValidationMessage({
          type: "error",
          message: `Insufficient payment history. Found ${payments.length} payments, but ${requiredMonths} are required.`
        });
        return;
      }
      
      // Check payment consistency by creating a map of months with payments
      const paymentMonths = new Map();
      
      // Get the start date for checking payments
      const checkStartDate = new Date();
      checkStartDate.setMonth(checkStartDate.getMonth() - requiredMonths);
      
      // Populate expected months
      for (let i = 0; i < requiredMonths; i++) {
        const monthDate = new Date(checkStartDate);
        monthDate.setMonth(monthDate.getMonth() + i);
        const monthKey = `${monthDate.getFullYear()}-${monthDate.getMonth() + 1}`;
        paymentMonths.set(monthKey, false);
      }
      
      // Mark months with payments
      for (const payment of payments) {
        if (payment.paymentDate >= checkStartDate) {
          const monthKey = `${payment.paymentDate.getFullYear()}-${payment.paymentDate.getMonth() + 1}`;
          paymentMonths.set(monthKey, true);
        }
      }
      
      // Count missing payments
      const missingPayments = Array.from(paymentMonths.values()).filter(paid => !paid).length;
      
      // Apply validation rules
      if (missingPayments > 0) {
        if (monthsDiff > 12 && missingPayments === 1) {
          // Contract over 12 months with only one missing payment - show warning
          setValidationMessage({
            type: "warning",
            message: `Warning: One month of payment is missing in the last 12 months. You may proceed, but this could affect the claim processing.`
          });
        } else {
          // More than one missing payment or contract less than 12 months - show error
          setValidationMessage({
            type: "error",
            message: `Payment consistency check failed. ${missingPayments} months of payments are missing in the required period.`
          });
        }
      }
      
    } catch (error) {
      console.error('Error validating cause of death:', error);
      setValidationMessage({
        type: "error",
        message: "An error occurred while validating the cause of death. Please try again."
      });
    }
  }

  // Add function to handle bank detail edit
  const handleEditBankDetail = (detail: BankDetail) => {
    setCurrentBankDetail(detail)
    setBankDetailsDialogOpen(true)
  }

  // Add function to save bank detail changes
  const handleSaveBankDetail = () => {
    if (!currentBankDetail) return
    
    // Save the bank detail first before doing anything else
    setBankDetails(prev => prev.map(detail => 
      detail.id === currentBankDetail.id ? currentBankDetail : detail
    ))
    
    // Then close the dialog and reset the current bank detail
    setBankDetailsDialogOpen(false)
    setCurrentBankDetail(null)
  }

  // Update the deceased person selection handler to call the new function
  const handleDeceasedPersonChange = (value: string) => {
    if (!contractData) return;

    // Find the selected member from options
    const selectedMember = memberOptions.find(member => member.idNumber === value);
    
    if (selectedMember) {
      // Set the selected deceased person ID
      setSelectedDeceasedPerson(value);
      
      // Determine the relationship value
      const relationship = selectedMember.role === "Main Member" ? "Main Policy Holder" : selectedMember.role;
      
      // Set deceased info based on selected member
      const updatedDeceasedInfo = {
        firstName: selectedMember.firstName,
        lastName: selectedMember.lastName,
        idNumber: selectedMember.idNumber,
        dateOfDeath: "",
        causeOfDeath: "",
        placeOfDeath: "",
        relationship: relationship
      };
      
      // Update deceased info state
      setDeceasedInfo(updatedDeceasedInfo);
      
      // Set formData based on role
      if (selectedMember.role === "Main Member") {
        // If main member is deceased, claimant is beneficiary
        setFormData(prev => ({
          ...prev,
          claimantName: contractData.beneficiaries[0]?.personalInfo.firstName + " " + contractData.beneficiaries[0]?.personalInfo.lastName,
          relationship: contractData.beneficiaries[0]?.personalInfo.relationshipToMainMember || "Beneficiary"
        }));
      } else {
        // If dependent is deceased, claimant is main member
        setFormData(prev => ({
          ...prev,
          claimantName: contractData.mainMember.personalInfo.firstName + " " + contractData.mainMember.personalInfo.lastName,
          relationship: "Main Policy Holder"
        }));
      }
      
      // Call updateBankDetailsForDeceasedPerson with the updated relationship
      updateBankDetailsForDeceasedPerson(relationship);
    }
  };

  // Add function to update bank details based on selected deceased person
  const updateBankDetailsForDeceasedPerson = async (relationshipValue?: string) => {
    if (!contractData || !policyNumber) return;
    
    // Use the passed relationship value or fall back to the state value
    const relationship = relationshipValue || deceasedInfo.relationship;
    if (!relationship) return;
    
    try {
      const relationshipsRef = collection(db, 'member_contract_relationships');
      let relationshipsQuery;

      // If main policy holder is selected, get beneficiaries
      if (relationship === "Main Policy Holder") {
        relationshipsQuery = query(
          relationshipsRef,
          where('contract_number', '==', policyNumber),
          where('role', '==', 'Beneficiary')
        );
      } else {
        // If dependent/beneficiary is selected, get main member
        relationshipsQuery = query(
          relationshipsRef,
          where('contract_number', '==', policyNumber),
          where('role', '==', 'Main Member')
        );
      }
      
      // Rest of the function remains the same
      const relationshipsSnapshot = await getDocs(relationshipsQuery);
      
      // Get member details for each relationship
      const memberDetailsData = await Promise.all(
        relationshipsSnapshot.docs.map(async (relationshipDoc) => {
          const relationshipData = relationshipDoc.data();
          const memberId = relationshipData.member_id;
          
          // Get member details from Members collection
          const memberDoc = await getDoc(doc(db, 'Members', memberId));
          if (!memberDoc.exists()) return null;
          
          const memberData = memberDoc.data();
          return {
            id: memberId,
            firstName: memberData.firstName || '',
            lastName: memberData.lastName || '',
            idNumber: memberData.idNumber || '',
            role: relationshipData.role
          };
        })
      );
      
      // Filter out null values and ensure proper typing
      const validMembers = memberDetailsData.filter((member): member is {
        id: string;
        firstName: string;
        lastName: string;
        idNumber: string;
        role: string;
      } => member !== null);
      
      // Initialize bank details with retrieved members
      const newBankDetails: BankDetail[] = [];
      
      validMembers.forEach((member, index) => {
        newBankDetails.push({
          id: `bank-${Date.now()}-${index}`,
          accountHolder: `${member.firstName} ${member.lastName}`,
          bankName: "",
          accountType: "",
          accountNumber: "",
          branchCode: "",
          memberId: member.id
        });
      });
      
      setBankDetails(newBankDetails);
      
    } catch (error) {
      console.error('Error updating bank details for deceased person:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update bank details based on selected deceased person."
      });
    }
  };

  return (
    <div className="container mx-auto py-6 space-y-8">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold">Funeral Claims Processing</h1>
        <p className="text-muted-foreground">Submit and track funeral benefit claims</p>
      </div>

      <Tabs value={activeTab} onValueChange={handleTabChange}>
        <TabsList className="grid w-full grid-cols-7">
          <TabsTrigger value="policy-lookup">Policy Lookup</TabsTrigger>
          <TabsTrigger value="deceased">Deceased</TabsTrigger>
          <TabsTrigger value="bank-details">Bank Details</TabsTrigger>
          <TabsTrigger value="documents">Documents</TabsTrigger>
          <TabsTrigger value="claim-form">Claim Form</TabsTrigger>
          <TabsTrigger value="claim-summary">Summary</TabsTrigger>
          <TabsTrigger value="tracking">Tracking</TabsTrigger>
        </TabsList>

        <TabsContent value="policy-lookup">
          <Card>
            <CardHeader>
              <CardTitle>Policy Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex gap-4">
                <div className="flex-1">
                  <Label htmlFor="policyNumber">Contract Number</Label>
                  <Input
                    id="policyNumber"
                    placeholder="Enter contract number"
                    value={policyNumber}
                    onChange={(e) => setPolicyNumber(e.target.value)}
                  />
                </div>
                <Button
                  className="mt-8"
                  onClick={handlePolicyLookup}
                  disabled={loading}
                >
                  {loading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Searching...
                    </>
                  ) : (
                    <>
                      <Search className="mr-2 h-4 w-4" />
                      Lookup Contract
                    </>
                  )}
                </Button>
              </div>

              {contractData && (
                <div className="space-y-4">
                  <Alert>
                    <CheckCircle2 className="h-4 w-4" />
                    <AlertTitle>Contract Found</AlertTitle>
                    <AlertDescription>
                      Contract details have been retrieved successfully.
                    </AlertDescription>
                  </Alert>

                  <Card className="mt-6">
                    <CardContent className="pt-6">
                      <ContractSummary
                        data={contractData}
                        onEdit={() => {}}
                      />
                    </CardContent>
                  </Card>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="deceased">
          <Card>
            <CardHeader className="pb-4">
              <CardTitle>Deceased Information</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="memberSelect">Select Deceased Person</Label>
                    <Select
                      value={selectedDeceasedPerson}
                      onValueChange={handleDeceasedPersonChange}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select person" />
                      </SelectTrigger>
                      <SelectContent>
                        {memberOptions.map((member) => (
                          <SelectItem 
                            key={member.idNumber} 
                            value={member.idNumber}
                          >
                            {member.firstName} {member.lastName} ({member.role === "Main Member" ? "Main Policy Holder" : member.role})
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="relationship">Relationship to Policy Holder</Label>
                    <Input
                      id="relationship"
                      value={deceasedInfo.relationship}
                      disabled
                    />
                  </div>
                </div>

                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <Label htmlFor="firstName">First Name</Label>
                    <Input
                      id="firstName"
                      value={deceasedInfo.firstName}
                      onChange={(e) => setDeceasedInfo(prev => ({ ...prev, firstName: e.target.value }))}
                      placeholder="Enter first name"
                      disabled
                    />
                  </div>
                  <div>
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input
                      id="lastName"
                      value={deceasedInfo.lastName}
                      onChange={(e) => setDeceasedInfo(prev => ({ ...prev, lastName: e.target.value }))}
                      placeholder="Enter last name"
                      disabled
                    />
                  </div>
                  <div>
                    <Label htmlFor="idNumber">ID Number</Label>
                    <Input
                      id="idNumber"
                      value={deceasedInfo.idNumber}
                      onChange={(e) => setDeceasedInfo(prev => ({ ...prev, idNumber: e.target.value }))}
                      placeholder="Enter ID number"
                      disabled
                    />
                  </div>
                  <div>
                    <Label htmlFor="dateOfDeath">Date of Death</Label>
                    <Input
                      id="dateOfDeath"
                      type="date"
                      value={deceasedInfo.dateOfDeath}
                      onChange={(e) => setDeceasedInfo(prev => ({ ...prev, dateOfDeath: e.target.value }))}
                    />
                  </div>
                  <div>
                    <Label htmlFor="causeOfDeath">Cause of Death</Label>
                    <Select
                      value={deceasedInfo.causeOfDeath}
                      onValueChange={(value) => {
                        setDeceasedInfo(prev => ({ ...prev, causeOfDeath: value }));
                        
                        // Reset validation message
                        setValidationMessage({ type: null, message: "" });
                        
                        // Perform validations when cause of death is selected
                        if (value && contractData) {
                          validateCauseOfDeath(value);
                        }
                      }}
                    >
                      <SelectTrigger id="causeOfDeath">
                        <SelectValue placeholder="Select cause" />
                      </SelectTrigger>
                      <SelectContent>
                        {causeOfDeathOptions.map((option) => (
                          <SelectItem key={option.id} value={option.option}>
                            {option.option}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="placeOfDeath">Place of Death</Label>
                    <Input
                      id="placeOfDeath"
                      value={deceasedInfo.placeOfDeath}
                      onChange={(e) => setDeceasedInfo(prev => ({ ...prev, placeOfDeath: e.target.value }))}
                      placeholder="Enter place"
                    />
                  </div>
                </div>

                {validationMessage.type && (
                  <Alert className="mt-2" variant={validationMessage.type === "error" ? "destructive" : "default"}>
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle>{validationMessage.type === "error" ? "Error" : "Warning"}</AlertTitle>
                    <AlertDescription>
                      {validationMessage.message}
                    </AlertDescription>
                  </Alert>
                )}

                <Alert className="mt-2">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>Important</AlertTitle>
                  <AlertDescription>
                    Please ensure all information provided is accurate and matches the death certificate.
                  </AlertDescription>
                </Alert>

                <div className="flex justify-end gap-4">
                  <Button variant="outline" onClick={() => setActiveTab("policy-lookup")}>
                    Back
                  </Button>
                  <Button onClick={() => setActiveTab("bank-details")}>
                    Next
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="bank-details">
          <Card>
            <CardHeader className="pb-4">
              <CardTitle>Bank Details</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Bank Details Table */}
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Holder</TableHead>
                      <TableHead>Bank</TableHead>
                      <TableHead>Type</TableHead>
                      <TableHead>Number</TableHead>
                      <TableHead>Branch</TableHead>
                      <TableHead>Statement</TableHead>
                      <TableHead>Action</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {bankDetails.length > 0 ? (
                      bankDetails.map((detail) => (
                        <TableRow key={detail.id}>
                          <TableCell>{detail.accountHolder}</TableCell>
                          <TableCell>{detail.bankName || "Not selected"}</TableCell>
                          <TableCell>{detail.accountType || "Not selected"}</TableCell>
                          <TableCell>{detail.accountNumber || "Not provided"}</TableCell>
                          <TableCell>{detail.branchCode || "Not provided"}</TableCell>
                          <TableCell>
                            {detail.statementUrl ? (
                              <div className="flex items-center gap-4">
                                <div className="flex items-center gap-2 text-green-500">
                                  <CheckCircle2 className="h-4 w-4" />
                                  <span>Uploaded</span>
                  </div>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => {
                                    setViewingDocument({ url: detail.statementUrl!, type: "Bank Statement" });
                                  }}
                                >
                                  <Eye className="h-4 w-4" />
                                </Button>
                  </div>
                            ) : (
                              <div className="flex items-center gap-2 text-muted-foreground">
                                <FileText className="h-4 w-4" />
                                <span>Not uploaded</span>
                </div>
                            )}
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <Button 
                                variant="ghost" 
                                size="icon"
                                onClick={() => handleEditBankDetail(detail)}
                              >
                                <Pencil className="h-4 w-4" />
                              </Button>
                  </div>
                          </TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={7} className="text-center py-4 text-muted-foreground">
                          No bank details available. Please lookup a policy first.
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>

                  <Alert>
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle>Important</AlertTitle>
                    <AlertDescription>
                      Please ensure all banking details are accurate. Incorrect details may delay claim payment.
                    </AlertDescription>
                  </Alert>

                  <div className="flex justify-end gap-4">
                    <Button variant="outline" onClick={() => setActiveTab("deceased")}>
                      Back
                    </Button>
                    <Button onClick={() => setActiveTab("documents")}>
                      Next
                    </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="documents">
          <Card>
            <CardHeader>
              <CardTitle>Required Documents</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid gap-6 md:grid-cols-2">
                <div className="space-y-4">
                  <h3 className="font-semibold">Mandatory Documents</h3>
                  <div className="space-y-4">
                    {['Death Certificate', 'ID Document'].map((docType) => (
                      <div key={docType} className="space-y-2">
                        <Label className="flex items-center gap-2">
                          {docType}
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <span className="text-sm text-muted-foreground">
                                  (Required)
                                </span>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p>This document is required for claim processing</p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        </Label>
                        <div className="flex items-center gap-4">
                          <Input
                            type="file"
                            accept=".pdf,.jpg,.jpeg,.png"
                            className="hidden"
                            id={`${docType}-upload`}
                            onChange={(e) => {
                              const file = e.target.files?.[0]
                              if (file) handleFileUpload(file, docType)
                            }}
                          />
                          <Button
                            type="button"
                            variant={documents.some(doc => doc.type === docType) ? "outline" : "secondary"}
                            onClick={() => document.getElementById(`${docType}-upload`)?.click()}
                            className="flex items-center gap-2"
                          >
                            <Upload className="h-4 w-4" />
                            {documents.some(doc => doc.type === docType) ? `Change ${docType}` : `Upload ${docType} *`}
                          </Button>
                          {documents.some(doc => doc.type === docType && doc.status === "completed") && (
                            <div className="flex items-center gap-2">
                              <CheckCircle2 className="h-4 w-4 text-green-500" />
                              <span className="text-sm text-muted-foreground">{docType} uploaded</span>
                            </div>
                          )}
                          {documents.some(doc => doc.type === docType && doc.status === "uploading") && (
                            <div className="flex items-center gap-2">
                              <Loader2 className="h-4 w-4 animate-spin" />
                              <span className="text-sm text-muted-foreground">Uploading...</span>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="font-semibold">Additional Documents</h3>
                  <div className="space-y-4">
                    {['Funeral Invoice', 'Medical Certificate', 'Other'].map((docType) => (
                      <div key={docType} className="space-y-2">
                        <Label className="flex items-center gap-2">
                          {docType}
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <span className="text-sm text-muted-foreground">
                                  (Optional)
                                </span>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p>Upload {docType} if available</p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        </Label>
                        <div className="flex items-center gap-4">
                          <Input
                            type="file"
                            accept=".pdf,.jpg,.jpeg,.png"
                            className="hidden"
                            id={`${docType}-upload`}
                            onChange={(e) => {
                              const file = e.target.files?.[0]
                              if (file) handleFileUpload(file, docType)
                            }}
                          />
                          <Button
                            type="button"
                            variant={documents.some(doc => doc.type === docType) ? "outline" : "secondary"}
                            onClick={() => document.getElementById(`${docType}-upload`)?.click()}
                            className="flex items-center gap-2"
                          >
                            <Upload className="h-4 w-4" />
                            {documents.some(doc => doc.type === docType) ? `Change ${docType}` : `Upload ${docType}`}
                          </Button>
                          {documents.some(doc => doc.type === docType && doc.status === "completed") && (
                            <div className="flex items-center gap-4">
                              <div className="flex items-center gap-2 text-green-500">
                                <CheckCircle2 className="h-4 w-4" />
                                <span>Uploaded</span>
                              </div>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => {
                                  const doc = documents.find(d => d.type === docType)
                                  if (doc?.url) {
                                    setViewingDocument({ url: doc.url, type: docType })
                                  }
                                }}
                              >
                                <Eye className="h-4 w-4" />
                              </Button>
                            </div>
                          )}
                          {documents.some(doc => doc.type === docType && doc.status === "uploading") && (
                            <div className="flex items-center gap-2">
                              <Loader2 className="h-4 w-4 animate-spin" />
                              <span className="text-sm text-muted-foreground">Uploading...</span>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <Alert>
                <FileText className="h-4 w-4" />
                <AlertTitle>Document Requirements</AlertTitle>
                <AlertDescription>
                  <ul className="list-disc list-inside space-y-1 text-sm">
                    <li>Accepted formats: PDF, JPG, PNG</li>
                    <li>Maximum file size: 10MB per document</li>
                    <li>Documents must be clear and legible</li>
                    <li>Mandatory Documents: Death Certificate and ID Document must be uploaded</li>
                    <li>Optional Documents: Funeral Invoice, Medical Certificate and Other supporting documents</li>
                  </ul>
                </AlertDescription>
              </Alert>

              <div className="flex justify-end gap-4">
                <Button variant="outline" onClick={() => setActiveTab("bank-details")}>
                  Back
                </Button>
                <Button 
                  onClick={() => setActiveTab("claim-form")}
                  disabled={!documents.some(doc => doc.status === "completed")}
                >
                  Continue to Claim Form
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="claim-form">
          <Card>
            <CardHeader>
              <CardTitle>Claim Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid gap-6 md:grid-cols-2">
                <div className="space-y-4">
    <div>
                    <Label>Contract Number</Label>
                    <Input
                      value={contractData?.mainMember.contractNumber || ""}
                      disabled
                    />
                  </div>
                  <div>
                    <Label>Claim Number</Label>
                    <Input
                      value={claimNumber || "Will be generated on submission"}
                      disabled
                    />
                  </div>
                  <div>
                    <Label>Claimant Name</Label>
                    <Input
                      value={formData.claimantName || (deceasedInfo.relationship === "Main Policy Holder" 
                        ? contractData?.beneficiaries[0]?.personalInfo.firstName + " " + contractData?.beneficiaries[0]?.personalInfo.lastName
                        : contractData?.mainMember.personalInfo.firstName + " " + contractData?.mainMember.personalInfo.lastName)}
                      onChange={(e) => setFormData(prev => ({ ...prev, claimantName: e.target.value }))}
                      disabled
                    />
                  </div>
                  <div>
                    <Label>Relationship to Deceased</Label>
                    <Input
                      value={formData.relationship || (deceasedInfo.relationship === "Main Policy Holder"
                        ? contractData?.beneficiaries[0]?.personalInfo.relationshipToMainMember || "Beneficiary"
                        : "Main Policy Holder")}
                      onChange={(e) => setFormData(prev => ({ ...prev, relationship: e.target.value }))}
                      disabled
                    />
                  </div>
                </div>
                <div className="space-y-4">
                  <div>
                    <Label>Service Date</Label>
                    <Input
                      type="date"
                      value={formData.serviceDate}
                      onChange={(e) => setFormData(prev => ({ ...prev, serviceDate: e.target.value }))}
                    />
                  </div>
                  <div>
                    <Label>Service Provider</Label>
                    <Input
                      value={formData.serviceProvider}
                      onChange={(e) => setFormData(prev => ({ ...prev, serviceProvider: e.target.value }))}
                      placeholder="Enter service provider name"
                    />
                  </div>
                  <div>
                    <Label>Location</Label>
                    <Input
                      value={formData.location}
                      onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
                      placeholder="Enter service location"
                    />
                  </div>
                </div>
              </div>

              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertTitle>Important Notice</AlertTitle>
                <AlertDescription>
                  Please ensure all information provided is accurate. False or misleading information may result in claim rejection.
                </AlertDescription>
              </Alert>

              <div className="flex justify-end gap-4">
                <Button variant="outline" onClick={() => setActiveTab("documents")}>
                  Back
                </Button>
                <Button onClick={handleSubmitClaim} disabled={submitting}>
                  {submitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Submitting...
                    </>
                  ) : (
                    "Submit Claim"
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="claim-summary">
          <Card>
            <CardHeader>
              <CardTitle>Claim Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue="policy" className="w-full">
                <TabsList className="grid w-full grid-cols-5">
                  <TabsTrigger value="policy">Policy Information</TabsTrigger>
                  <TabsTrigger value="deceased">Deceased Information</TabsTrigger>
                  <TabsTrigger value="bank">Bank Details</TabsTrigger>
                  <TabsTrigger value="documents">Documents</TabsTrigger>
                  <TabsTrigger value="claim">Claim Details</TabsTrigger>
                </TabsList>

                <TabsContent value="policy">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Contract Number</TableHead>
                        <TableHead>Policy Holder</TableHead>
                        <TableHead>Cover Amount</TableHead>
                        <TableHead>Policy Status</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      <TableRow>
                        <TableCell>{contractData?.mainMember.contractNumber}</TableCell>
                        <TableCell>
                          {contractData?.mainMember.personalInfo.firstName} {contractData?.mainMember.personalInfo.lastName}
                        </TableCell>
                        <TableCell>R {contractData?.policiesDetails.coverAmount}</TableCell>
                        <TableCell>
                          <Badge variant="outline">{contractData?.status || 'Active'}</Badge>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TabsContent>

                <TabsContent value="deceased">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Full Name</TableHead>
                        <TableHead>ID Number</TableHead>
                        <TableHead>Date of Death</TableHead>
                        <TableHead>Cause of Death</TableHead>
                        <TableHead>Place of Death</TableHead>
                        <TableHead>Relationship</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      <TableRow>
                        <TableCell>{deceasedInfo.firstName} {deceasedInfo.lastName}</TableCell>
                        <TableCell>{deceasedInfo.idNumber}</TableCell>
                        <TableCell>{deceasedInfo.dateOfDeath}</TableCell>
                        <TableCell>{deceasedInfo.causeOfDeath}</TableCell>
                        <TableCell>{deceasedInfo.placeOfDeath}</TableCell>
                        <TableCell>{deceasedInfo.relationship}</TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TabsContent>

                <TabsContent value="bank">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Holder</TableHead>
                        <TableHead>Bank</TableHead>
                        <TableHead>Type</TableHead>
                        <TableHead>Number</TableHead>
                        <TableHead>Branch</TableHead>
                        <TableHead>Statement</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {bankDetails.filter(detail => 
                        detail.bankName && 
                        detail.accountType && 
                        detail.accountNumber && 
                        detail.branchCode
                      ).map((detail, index) => (
                        <TableRow key={detail.id}>
                          <TableCell>{detail.accountHolder}</TableCell>
                          <TableCell>{detail.bankName}</TableCell>
                          <TableCell>{detail.accountType}</TableCell>
                          <TableCell>{detail.accountNumber}</TableCell>
                          <TableCell>{detail.branchCode}</TableCell>
                          <TableCell>
                            {detail.statementUrl ? (
                              <div className="flex items-center gap-4">
                                <div className="flex items-center gap-2 text-green-500">
                                  <CheckCircle2 className="h-4 w-4" />
                                  <span>Uploaded</span>
                                </div>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => {
                                    setViewingDocument({ url: detail.statementUrl!, type: "Bank Statement" });
                                  }}
                                >
                                  <Eye className="h-4 w-4" />
                                </Button>
                              </div>
                            ) : (
                              <div className="flex items-center gap-2 text-muted-foreground">
                                <FileText className="h-4 w-4" />
                                <span>Not uploaded</span>
                              </div>
                            )}
                          </TableCell>
                      </TableRow>
                      ))}
                      {bankDetails.filter(detail => 
                        detail.bankName && 
                        detail.accountType && 
                        detail.accountNumber && 
                        detail.branchCode
                      ).length === 0 && (
                      <TableRow>
                          <TableCell colSpan={6} className="text-center py-4 text-muted-foreground">
                            No complete bank details available
                          </TableCell>
                      </TableRow>
                      )}
                    </TableBody>
                  </Table>
                </TabsContent>

                <TabsContent value="documents">
                  <div className="grid gap-4 md:grid-cols-2">
                    <div>
                      <h4 className="font-medium mb-2">Mandatory Documents</h4>
                      <Table>
                        <TableBody>
                          {['Death Certificate', 'ID Document', 'Bank Statement'].map((docType) => (
                            <TableRow key={docType}>
                              <TableCell className="font-medium">{docType}</TableCell>
                              <TableCell>
                                {documents.some(doc => doc.type === docType && doc.status === "completed") ? (
                                  <div className="flex items-center gap-4">
                                    <div className="flex items-center gap-2 text-green-500">
                                      <CheckCircle2 className="h-4 w-4" />
                                      <span>Uploaded</span>
                                    </div>
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      onClick={() => {
                                        const doc = documents.find(d => d.type === docType)
                                        if (doc?.url) {
                                          setViewingDocument({ url: doc.url, type: docType })
                                        }
                                      }}
                                    >
                                      <Eye className="h-4 w-4" />
                                    </Button>
                                  </div>
                                ) : (
                                  <div className="flex items-center gap-2 text-yellow-500">
                                    <AlertCircle className="h-4 w-4" />
                                    <span>Pending</span>
                                  </div>
                                )}
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                    <div>
                      <h4 className="font-medium mb-2">Optional Documents</h4>
                      <Table>
                        <TableBody>
                          {['Funeral Invoice', 'Medical Certificate', 'Other'].map((docType) => (
                            <TableRow key={docType}>
                              <TableCell className="font-medium">{docType}</TableCell>
                              <TableCell>
                                {documents.some(doc => doc.type === docType && doc.status === "completed") ? (
                                  <div className="flex items-center gap-4">
                                    <div className="flex items-center gap-2 text-green-500">
                                      <CheckCircle2 className="h-4 w-4" />
                                      <span>Uploaded</span>
                                    </div>
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      onClick={() => {
                                        const doc = documents.find(d => d.type === docType)
                                        if (doc?.url) {
                                          setViewingDocument({ url: doc.url, type: docType })
                                        }
                                      }}
                                    >
                                      <Eye className="h-4 w-4" />
                                    </Button>
                                  </div>
                                ) : (
                                  <div className="flex items-center gap-2 text-muted-foreground">
                                    <FileText className="h-4 w-4" />
                                    <span>Not uploaded</span>
                                  </div>
                                )}
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="claim">
                  <Table className="border rounded-md">
                    <TableHeader>
                      <TableRow className="bg-muted/50">
                        <TableHead className="w-[180px]">Claim Number</TableHead>
                        <TableHead className="w-[150px]">Claimant Name</TableHead>
                        <TableHead className="w-[150px]">Relationship</TableHead>
                        <TableHead className="w-[120px]">Service Date</TableHead>
                        <TableHead className="w-[150px]">Service Provider</TableHead>
                        <TableHead className="w-[180px]">Location</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      <TableRow>
                        <TableCell className="font-medium">{claimNumber || "Will be generated on submission"}</TableCell>
                        <TableCell>{formData.claimantName}</TableCell>
                        <TableCell>{formData.relationship}</TableCell>
                        <TableCell>{formData.serviceDate}</TableCell>
                        <TableCell>{formData.serviceProvider}</TableCell>
                        <TableCell className="truncate max-w-[180px]" title={formData.location}>
                          {formData.location}
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell colSpan={2} className="font-medium bg-muted/20">Status</TableCell>
                        <TableCell colSpan={4} className="bg-muted/20">
                          <Select
                            value={claimStatus}
                            onValueChange={handleStatusChange}
                          >
                            <SelectTrigger className="w-[200px]">
                              <SelectValue placeholder="Select status" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="FNOL">FNOL</SelectItem>
                              <SelectItem value="under investigation">Under Investigation</SelectItem>
                              <SelectItem value="approved">Approved</SelectItem>
                              <SelectItem value="paid">Paid</SelectItem>
                              <SelectItem value="rejected">Rejected</SelectItem>
                            </SelectContent>
                          </Select>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TabsContent>
              </Tabs>

              <div className="flex justify-end gap-4 mt-6">
                <Button variant="outline" onClick={() => setActiveTab("documents")}>
                  Back to Documents
                </Button>
                <Button onClick={handleSubmitClaim} disabled={submitting}>
                  {submitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Submitting...
                    </>
                  ) : (
                    "Submit Claim"
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="tracking">
          <Card>
            <CardHeader>
              <CardTitle>Track Claims</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="flex gap-4">
                  <div className="flex-1">
                    <Label htmlFor="trackingNumber">Claim Number</Label>
                    <Input
                      id="trackingNumber"
                      placeholder="Enter claim number"
                      value={trackingNumber}
                      onChange={(e) => setTrackingNumber(e.target.value)}
                    />
                  </div>
                  <Button
                    className="mt-8"
                    onClick={handleTrackClaim}
                    disabled={loadingTracking}
                  >
                    {loadingTracking ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Searching...
                      </>
                    ) : (
                      <>
                        <Search className="mr-2 h-4 w-4" />
                        Track Claim
                      </>
                    )}
                  </Button>
                </div>

                {trackedClaims.length > 0 ? (
                  <div className="space-y-6">
                    {trackedClaims.map((claim) => (
                      <Card key={claim.claimNumber} className="p-6">
                        <div className="space-y-4">
                          <div className="flex justify-between items-start">
                            <div>
                              <h3 className="text-lg font-semibold">
                                Claim #{claim.claimNumber}
                              </h3>
                              <p className="text-sm text-muted-foreground">
                                Submitted on {format(claim.submissionDate, 'PPP')}
                              </p>
                            </div>
                            <Badge variant={getStatusBadgeVariant(claim.status)}>
                              {claim.status}
                            </Badge>
                          </div>

